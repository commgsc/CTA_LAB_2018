apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nodered-app
  labels:
    app: sandbox-nodered
    tier: frontend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sandbox-nodered
        tier: frontend
    spec:
      containers:
      - name: nodered-app
        image: "tomyogms/noderedapp:v1"
        env:
            - name: FLOWS
              value: "node-red-flow.json"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 1880
---
### Node Red service
apiVersion: v1
kind: Service
metadata:
  name: nodered-app
  labels:
    app: sandbox-nodered
    tier: frontend
spec:
  type: NodePort
  selector:
    app: sandbox-nodered
    tier: frontend
  ports:
  - port: 1880  
    targetPort: 1880
    protocol: TCP
    name: nodered-app-port
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: tmf-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tmf-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi        
---    
### MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    tier: backend
spec:
  type: NodePort
  selector:
    app: sandbox-nodered
    tier: backend
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: sandobox-mongodb-port
---
### MongoDB deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mongodb-sandbox
  labels:
    app: sandbox-nodered
    tier: backend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sandbox-nodered
        tier: backend
    spec:
      containers:
      - name: mongo
        image: "mongo:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 27017
        volumeMounts:
            - name: tmf-pv-storage
              mountPath: /data/db
      volumes:
        - name: tmf-pv-storage
          persistentVolumeClaim:
            claimName: tmf-pv-claim
---
### MQTT deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mqtt-sandbox
  labels:
    app: sandbox-nodered
    tier: backend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sandbox-nodered
        tier: backend
    spec:
      containers:
      - name: mqtt
        image: "ncarlier/mqtt:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 31798
---
### MQTT Service
apiVersion: v1
kind: Service
metadata:
  name: mqtt
  labels:
    tier: backend
spec:
  type: ClusterIP
  selector:
    app: sandbox-nodered
    tier: backend
  ports:
  - port: 31798
    targetPort: 31798
    protocol: TCP
    name: sandobox-mqtt-port
---

### Openwhisk deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: openwhisk-sandbox
  labels:
    app: sandbox-nodered
    tier: backend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sandbox-nodered
        tier: backend
    spec:
      containers:
      - name: openwhisk
        image: "openwhisk/dockerskeleton:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3128
---

### Openwhisk Service
apiVersion: v1
kind: Service
metadata:
  name: openwhisk
  labels:
    tier: backend
spec:
  type: ClusterIP
  selector:
    app: sandbox-nodered
    tier: backend
  ports:
  - port: 3128
    targetPort: 3128
    protocol: TCP
    name: sandobox-openwhisk-port

---

###  Kafka service requires 3 images
###  Zookeper Deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: zookeeper-sandbox
  labels:
    app: sandbox-nodered
    tier: backend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sandbox-nodered
        tier: backend
    spec:
      containers:
      - name: zookeeper
        image: "wurstmeister/zookeeper:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 2181
---
### Zookeeper Service
apiVersion: v1
kind: Service
metadata:
  name: zookeper
  labels:
    tier: backend
spec:
  selector:
    app: sandbox-nodered
    tier: backend
  ports:
  - port: 2181
    targetPort: 2181
    protocol: TCP
    name: sandbox-zookeeper-port
---
### Kafka Deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kafka-sandbox
  labels:
    app: sandbox-nodered
    tier: backend
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: sandbox-nodered
        tier: backend
    spec:
      containers:
      - name: kafka
        image: "wurstmeister/kafka:latest"
        env:
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeper:2181"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: kafka-cluster
            - name: KAFKA_CREATE_TOPICS
              value: mytopic:2:1
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 9092
---
### Kafka Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-cluster
  labels:
    tier: backend
spec:
  type: NodePort
  selector:
    app: sandbox-nodered
    tier: backend
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: sandbox-kafka-port
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: max-facial-age-estimator
  labels:
    app: sandbox-nodered
    tier: backend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sandbox-nodered
        tier: backend
    spec:
      containers:
      - name: max-facial-age-estimator
        image: "tomyogms/facial-age:v1"
        ports:
        - name: http
          containerPort: 5000

---
#faceAgeDetection
apiVersion: v1
kind: Service
metadata:
  name: max-facial-age-estimator
  labels:
    tier: backend
spec:
  selector:
    app: sandbox-nodered
    tier: backend
  ports:
   - port: 5000
     targetPort: 5000
     protocol: TCP
     name: face-age-port
  type: NodePort

---